'''
Created on Feb 3, 2015

@author: sergei
'''

import requests
from requests.auth import HTTPBasicAuth
from requests.exceptions import ConnectionError
#mport pprint
import json

def enum(*args):
     enums = dict(zip(args, range(len(args))))
     return type('Enum', (), enums)

CTRL_STATUS = enum('OK', 'CONN_ERROR', 'DATA_NOT_FOUND',
                   'BAD_REQUEST', 'UNAUTHORIZED_ACCESS', 'N_A')
NODE_STATUS = enum('CONNECTED', 'NOT_CONNECTED', 'NOT_FOUND', 'N_A')

class CtrlStatus(object):
    def __init__(self, status):
        if status not in (CTRL_STATUS.OK,
                          CTRL_STATUS.CONN_ERROR,
                          CTRL_STATUS.DATA_NOT_FOUND,
                          CTRL_STATUS.BAD_REQUEST,
                          CTRL_STATUS.UNAUTHORIZED_ACCESS,
                          CTRL_STATUS.N_A):
            raise ValueError('undefined status value')
        self.status = status
    
    def string(self):
        if (self.status == CTRL_STATUS.OK):
            return "success"
        if( self.status == CTRL_STATUS.CONN_ERROR):
            return "server connection error"
        if( self.status == CTRL_STATUS.DATA_NOT_FOUND):
            return "requested data is not found"
        if( self.status == CTRL_STATUS.BAD_REQUEST):
            return "bad or invalid data in request"
        if( self.status == CTRL_STATUS.UNAUTHORIZED_ACCESS):
            return "server unauthorized access"
        if( self.status == CTRL_STATUS.N_A):
            return "unknown error"

def ctrl_get_request(url, uname, passwd):
    resp = None
    status = None
        
    try:
        resp = requests.get(url, auth=HTTPBasicAuth(uname, passwd))
        status = CTRL_STATUS.OK
    except ConnectionError:
        status = CTRL_STATUS.CONN_ERROR
    
    return (status, resp)



#================================
#
#================================
def check_node_config_status(ipAddr, portNum, uname, passwd, nodeId):
    url="http://{}:{}/restconf/config/opendaylight-inventory:nodes".format(ipAddr, portNum)
    status = CTRL_STATUS.N_A
    
    try:
        resp = requests.get(url, auth=HTTPBasicAuth(uname, passwd))
        print "+++++++++++++++++++++"
        print type(resp)
    except ConnectionError:
        return CTRL_STATUS.CONN_ERROR

    if (resp.status_code == 401):
        return CTRL_STATUS.UNAUTHORIZED_ACCESS    
    
    if (resp.status_code == 400):
        return CTRL_STATUS.BAD_REQUEST

    if (resp.status_code == 200):
        data = json.loads(resp.content )
        nodes = data.get('nodes')
        nodes_list = nodes.get('node')
        status = CTRL_STATUS.NOT_FOUND
        for elem in nodes_list:
            if(elem['id'] == nodeId):
                status = CTRL_STATUS.OK
                break
        
    return status

#================================
#
#================================
def check_node_conn_status(ipAddr, portNum, uname, passwd, nodeId):
#    url="http://" + ipAddr + ":" + portNum + "/restconf/operational/opendaylight-inventory:nodes"
    url="http://{}:{}/restconf/operational/opendaylight-inventory:nodes".format(ipAddr, portNum)
    status = "Node is not connected"
    matchFound = False
    
    try:
        resp = requests.get(url, auth=HTTPBasicAuth(uname, passwd))    
    except ConnectionError:
        status = "HTTP server connection error"
        return status
    
    if (resp.status_code != 200):
        status = "HTTP request error %d" % resp.status_code
        return status
    
    data = json.loads(resp.content)
    nodes = data.get('nodes')
    nodes_list = nodes.get('node')
    for elem in nodes_list:
        if(elem['id'] == nodeId):
            if 'netconf-node-inventory:connected' in elem:
                if (elem['netconf-node-inventory:connected'] == True):
                    matchFound = True
                    status = "Node is connected"
                    break

    if(matchFound == False):
        status = "Node is not found"
        
    return status


#================================
#
#================================
def get_nodes_config_datastore(ipAddr, portNum, uname, passwd, nodeId):
#    url="http://" + ipAddr + ":" + portNum + "/restconf/config/opendaylight-inventory:nodes"
    url="http://{}:{}/restconf/config/opendaylight-inventory:nodes".format(ipAddr, portNum) 
    reslist = []
    status = "Node is not configured"
    
    try:
        resp = requests.get(url, auth=HTTPBasicAuth(uname, passwd))    
    except ConnectionError:
        status = "HTTP server connection error"
        return status
    
    if (resp.status_code != 200):
        status = "HTTP request error %d" % resp.status_code
        return status
        
    data = json.loads(resp.content )
    nodes = data.get('nodes')
    nodes_list = nodes.get('node')
    for elem in nodes_list:
        if('id' in elem):
            reslist.append(str(elem['id']))
    
    return reslist


def get_nodes_conn_status(ipAddr, portNum, uname, passwd, nodeId):
    url="http://{}:{}/restconf/operational/opendaylight-inventory:nodes".format(ipAddr, portNum)
    reslist = dict()

    try:
        resp = requests.get(url, auth=HTTPBasicAuth(uname, passwd))    
    except ConnectionError:
        status = "HTTP server connection error"
        return status
    
    if (resp.status_code != 200):
        status = "HTTP request error %d" % resp.status_code
        return status
    
    data = json.loads(resp.content)
    nodes = data.get('nodes')
    nodes_list = nodes.get('node')
    for elem in nodes_list:
        print elem
        print type(elem)
        if ('id' in elem):
            print elem['id']
        if ('netconf-node-inventory:connected' in elem):
            print elem['netconf-node-inventory:connected']

def get_nodes_operational_datastore(ipAddr, portNum, uname, passwd, nodeId):
#    url="http://" + ipAddr + ":" + portNum + "/restconf/operational/opendaylight-inventory:nodes"
    url="http://{}:{}/restconf/operational/opendaylight-inventory:nodes".format(ipAddr, portNum)
    status = "Node is not connected"
    matchFound = False
    
    try:
        resp = requests.get(url, auth=HTTPBasicAuth(uname, passwd))    
    except ConnectionError:
        status = "HTTP server connection error"
        return status
    
    if (resp.status_code != 200):
        status = "HTTP request error %d" % resp.status_code
        return status
    
    data = json.loads(resp.content)
    nodes = data.get('nodes')
    nodes_list = nodes.get('node')
    for elem in nodes_list:
        print elem
        print type(elem)
        if ('id' in elem):
            print elem['id']
        if ('netconf-node-inventory:connected' in elem):
            print elem['netconf-node-inventory:connected']
        
#        '''
#        if ('netconf-node-inventory:connected' in elem):
#            print (elem('netconf-node-inventory:connected')
#        '''       
#        '''
#        if(elem['id'] == nodeId):
#            if 'netconf-node-inventory:connected' in elem:
#                if (elem['netconf-node-inventory:connected'] == True):
#                    matchFound = True
#                    status = "Node is connected"
#                    break
#        '''
#    '''
#    if(matchFound == False):
#        status = "Node is not found"
#    '''
    return status



if __name__ == "__main__":
    bvcIpAddr =  "172.22.18.246"
    bvcPortNum = "8181"     
    bvcUname = 'admin' 
    bvcPswd = 'admin'
    nodeName = 'vRouter1'
    
    
    url="http://{}:{}/restconf/config/opendaylight-inventory:nodes".format(bvcIpAddr, bvcPortNum)
    res = ctrl_get_request(url, bvcUname, bvcPswd)  
    print type(res)
    status = res[0]
    resp = res[1]
    print status
    print resp
    if (resp != None):
        print resp.status_code
        print resp.content
    
      
        
    '''
    print ("1) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
    status = check_node_config_status(bvcIpAddr, bvcPortNum, bvcUname, bvcPswd, nodeName)
    if (status == CTRL_STATUS.OK):
        print ("'%s' node is configured" % nodeName)
    else:
        print ("Error: %s" % CtrlStatus(status).string())
    
    print ("2) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
    conn_status = check_node_conn_status(bvcIpAddr, bvcPortNum, bvcUname, bvcPswd, nodeName)
#    print conn_status
    '''
    
    
    '''
    print ("1) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
    conf_status = get_node_conf_status(bvcIpAddr, bvcPortNum, bvcUname, bvcPswd, nodeName)
    print conf_status

    print ("2) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
    conn_status = get_node_conn_status(bvcIpAddr, bvcPortNum, bvcUname, bvcPswd, nodeName)
    print conn_status
    
    print ("3) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
    nodeslist = get_nodes_config_datastore(bvcIpAddr, bvcPortNum, bvcUname, bvcPswd, nodeName)
    print "Nodes configured:"
    for item in nodeslist:
        print "   {}".format(item)
   '''
    '''
    capabilities = [
                     "(urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl:fixed?revision=2013-12-01)threadpool-impl-fixed",
                    "(urn:opendaylight:params:xml:ns:yang:controller:md:sal:dom:impl?revision=2013-10-28)opendaylight-sal-dom-broker-impl",
                    "(urn:opendaylight:flow:types:queue?revision=2013-09-25)opendaylight-queue-types"]
   
          
    d = dict()
    d.update({'node': 'vRouter',})
    d.update({'connected': 'True',})
    d.update({'capabilities': capabilities})
    '''
    
    '''
    d = {'node' : 'vRouter',
         'connected' : True,
         'capabilities' : capabilities}
    '''
#    print type(d)
    '''
    for key in d.keys():
        print ("%s: %s" % (key, d[key]))
#        print d[key]
    '''
    
    '''
    print ("4) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n")
    nodeslist = get_nodes_operational_datastore(bvcIpAddr, bvcPortNum, bvcUname, bvcPswd, nodeName)
    print "Nodes operational status:"
    '''
